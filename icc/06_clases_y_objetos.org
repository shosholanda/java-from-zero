#+HTML_LINK_HOME: ../inicio.html
* Clases y objetos

** Definición de POO

Recordemos que la programación orientada a objetos se basa en abstraer
objetos del mundo real (o no) a valores procesables por una
computadora como lo son tipos de dato primitivos, y así crear
/objetos/.

La programación orientada a objetos (POO) requiere que se cumpla
- Abstracción
- Encapsulamiento
- Herencia
- Polimorfismo

El objetivo de tener /objetos/ es poder _separar_ funcionalidades en
objetos, donde cada uno cumple con cierta parte de un programa para
que en conjunto creen un sistema robusto. A su vez, cada objeto separa
su comportamiento en /métodos/, así es mucho más fácil leer y entender
secciones de código, divididos en métodos que si todo estuviera en el
~main~.

** Definición de Objeto

La definición de /objeto/ es la siguiente.

#+begin_verse
Un objeto es un /ente/ que tiene
- Identidad
- Propiedades o atributos
- Comportamiento
#+end_verse


En /Java/, la primera propiedad solo existe /cuando el objeto existe
en tiempo de ejecución/, que es donde aplica el concepto de
/programación orientada a objetos/.  Las otras dos propiedades se
definen /a través de una clase/, y se /añaden/ al objeto cuando este
existe. Cada objeto tendrá sus propios valores, pero compartirán la
misma categoría con sus similares.

** Clase vs Objeto

Todo esto es muy teórico, veamos un objeto práctico. Piensa por un
momento en el concepto de /persona/. Trata de visualizarlo en tu
mente. ¿Lo puedes ver a detalle? ¿Qué rostro tiene? ¿Es hombre o
mujer? ¿Qué color de piel tiene? ¿Qué color es el cabello? ¿Qué idioma
habla? ¿Cuál es la complexión de la persona?

Muchas de estas preguntas *no tienen respuesta*, ya que el concepto es
/una idea/ y las ideas /no están totalmente aterrizadas/. Esto
justamente es lo que representa una _clase_, una idea, un concepto,
una clase, que *no tiene exactamente definido su versión final*, pero
que define *qué es lo que va a tener*, en particular propiedades y
comportamiento.

Claramente sabemos que todas las personas comparten /ciertas/
características entre ellas, como extremidades, órganos vitales, sexo
entre otros; estas características comunes se definen para todos los
objetos. Y una clase crea un objeto, algo que ya existe y es
palpable.

Tomando el ejemplo de la clase Persona, piensa ahora en /Linus
Torvalds/. Todas las preguntas incógnitas ahora tienen respuesta. Esto
*ya es un objeto*. Puedes buscar quién es si todavía no sabes.

- Nombre: "Linus Benedict Torvalds"
- Rostro: "Pinguino"
- Sexo: "Hombre
- Nacionalidad: "Finlandia"
- Edad: 55+
  etc...

Similarmente, una clase en /Java/ solo define /atributos/ y /métodos/.
Y aterriza estos atributos creando o /instanciando/ el objeto con el
operador ~new~ donde no queda duda de quíen o qué es el objeto.

** Personificando objetos

/Java/ nos permite crear nuestros propias clases para poder crear
nuestros propios objetos que pueden hacer /cualquier cosa que
imaginemos/, pero que aterricemos. En /Java/, las clases se crean
siguiendo la siguiente estructura

#+begin_src java
  class [Nombre de la clase]{

      [Atributos de la clase]
  	
      [Métodos de la clase]
  	
      [Método main (opcional)]
  	
  }
#+end_src

Veamos un ejemplo a detalle:

#+begin_src java
  import java.util.Scanner;

  public class Persona {

      private Scanner input;
      private String nombre;
      private int edad;

      public void inicializar(){
  	input = new Scanner(System.in);
  	System.out.print("Ingresar nombre:");
  	nombre = input.nextLine();
  	System.out.print("Ingresar edad:");
  	edad = input.nextInt();
      }
      
      public void imprimir(){
  	System.out.println("Nombre: " + nombre);
  	System.out.println("Edad: " + edad);
      }

      public void esMayorDeEdad(){
  	if (edad >= 18){
  	    System.out.println(nombre + " es mayor de edad");
  	} else {
  	    System.out.println(nombre + " no es mayor de edad");
  	}
      }

      public static void main(String[] args){
  	Persona persona1;
  	persona1 = new Persona();
  	persona1.inicializar();
  	persona1.imprimir();
  	persona1.esMayorDeEdad();
      }
  }
#+end_src

El nombre de la clase *debe hacer referencia* al concepto que plasma
la clase. En este caso, es el concepto de persona.  Una clase /debería
ser siempre pública/ para que cualquier otro objeto pueda interactuar
con éste.

#+begin_src java
  public class Persona {
#+end_src

Los atributos (o variables de clase) los definimos dentro de la clase,
pero afuera del ~main~. Los atributos /siempre/ son *privados* por la
propiedad de /encapsulación/. Nos dicen qué propiedades tendrá el
/objeto/ pero no definen cuál es el valor final que tendrán. Son las
características en común que comparten todos los objetos de esta /clase/.
#+begin_src java
  private Scanner input;
  private String nombre;
  private int edad;
#+end_src

Estas variables *siempre* podrán ser accedidas desde cualquier función
o método /dentro/ de la clase (salvo la función ~main~).

Luego definimos los métodos, que es sinónimo de /comportamiento/. Son
muy parecidos al método ~main~ excepto que no tiene la cláusula
~static~ y es por una buena razón que veremos más adelante.
#+begin_src java
  public void inicializar(){
      input = new Scanner(System.in);
      System.out.print("Ingresar nombre:");
      nombre = input.nextLine();
      System.out.print("Ingresar edad:");
      edad = input.nextInt();
  }
#+end_src

En el método ~inicializar()~, que será el primero en ejecutar después
de crear el objeto, creamos un objeto de tipo ~Scanner~ a través de
/entrada estándar/, que es la que tecleamos en la terminal, y
asignamos un valor para /nombre/ y /edad/ _en tiempo de ejecución_, no
antes, ni aquí en la clase. *Notamos que todas las variables de clase
ya tienen un valor definido al terminar este método*.

El siguiente método ~imprimir()~, imprimirá en pantalla el contenido
de los atributos de la clase, los cuales son /nombre/ y /edad/.

#+begin_src java
  public void imprimir(){
      System.out.println("Nombre: " + nombre);
      System.out.println("Edad: " + edad);
  }
#+end_src

El tercer método tiene por objetivo saber si, dada la /edad/ cargada
anteriormente corresponde a una persona mayor de edad o no.
#+begin_src java
  public void esMayorDeEdad(){
      if (edad >= 18){
  	System.out.println(nombre + " es mayor de edad");
      } else {
  	System.out.println(nombre + " no es mayor de edad");
      }
  }
#+end_src

Finalmente, tenemos el método ~main~ que siempre hemos puesto. Como
estamos /al alcance/ de la clase ~Persona~, podemos /instanciar/
objetos de la misma (estamos en el mismo archivo). Veamos línea por
línea


La declaración (también conocido como /firma/) del método es la de
siempre; indica el punto de entrada del programa.
#+begin_src java
  public static void main(String[] args){
#+end_src

Declaramos un objeto *de tipo* ~Persona~. No hay nada concretado, pero
sí un _identificador_ al objeto mientras esté en ejecución el
programa, en este caso es el nombre de la variable ~persona1~, y debe
ser único.
#+begin_src java
  Persona persona1;
#+end_src

Y luego /instanciamos/ el objeto, concretando sus atributos a valores
que se puedan leer y escribir.

#+begin_src java
  persona1 = new Persona();
#+end_src

En principio, todos los atributos de ~Persona~ tienen un valor por
/omisión/ que /Java/ asigna automáticamente, pero son valores
mínimos. La siguiente tabla muestra a qué valores asigna
automáticamente java

|--------------+-------|
| Tipo de dato | valor |
|--------------+-------|
| int          | 0     |
| boolean      | false |
| double       | 0.0   |
| String       | null  |
| Scanner      | null  |
| byte         | 0x00  |
|--------------+-------|

*Nota*: El valor ~null~ es equivalente a la definición de /vacío/,
existe solo para decir que no hay nada, y es usado ampliamente en las
estructuras de datos.

Así que nuestro objeto ~persona1~ tiene ~nombre = null~ y ~edad =
0~, por eso el método ~incializar()~ asigna valores no vacíos. A
través del objeto ~persona1~ /mandamos llamar al método/ ~inicializar()~

#+begin_src java
  persona1.inicializar();
#+end_src

El operador ~.~ /punto/, busca el /identificador/ del método o
atributo /dentro/ de la clase y si lo encuentra, lo ejecuta.  Por eso,
en la clase ~String~ utilizamos /métodos sobre el objeto cadena/.

#+begin_src java
  String s1 = "hola!";
  System.out.println(s1.length()); //5
#+end_src
Más adelante veremos cómo al momento de crear un objeto podemos
asignar valores no vacíos en lugar que /Java/ los asigne
automáticamente.

El siguiente método /imprime/ los valores cargados por el método
~inicializar()~
#+begin_src java
  persona1.imprimir();
#+end_src

Y finalmente, saber si esta persona (~persona1~) es mayor de edad aún
cuando la variable ~edad~ fue definida /en tiempo de ejecución/.

#+begin_src java
  persona1.mayorDeEdad();
#+end_src

Es de suma importancia que queden claro el concepto de /clase/ y
/objeto/ ya que es la base de toda la /programación orientada a
objetos/.

** Problema 1: Triangulo
Crear una clase que, carge los lados de un triángulo a través de un
método ~inicializar()~. Además, debe imprimirse los atributos del
triángulo a través de un método ~imprimir()~ , así como los métodos
~ladoMayor(), ladoMenor()~ y ~esEquilatero()~ que imprime /lo que
describe el método/. El método ~main~ deberá ser el siguiente:

#+begin_src java
  public static void main (String[] args){
      Triangulo triangulo1 = new Triangulo();
      triangulo1.inicializar();
      triangulo1.imprimir();
      triangulo1.ladoMayor();
      triangulo1.ladoMenor();
      triangulo1.esEquilatero();
  }
#+end_src

** Problema 2: Coordenadas

Crear una clase que, reciba dos números enteros $x, y$ como
coordenadas del plano cartesiano a través del método ~inicializar()~.
El método ~imprime()~ deberá imprimir las coordenadas en la forma $(x,
y)$. Crear un método que nos imprima estas coordenadas $x, y$ a
coordenadas polares $(r, \theta)$; otro método que nos diga en qué
cuadrante del plano cartesiano se encuentra y finalmente otro método
que imprima el punto reflejado sobre el eje X y eje Y.

Recordemos que para transformar a coordenadas polares utilizamos
\begin{align}
r &= \sqrt{x^2 + y^2}\\
\theta &= \arctan{\frac{y}{x}}
\end{align}

** Problema 3: Cuadrado
Crear una clase que incluya el siguiente comportamiento:
+ Cargar el tamaño de un lado del cuadrado.
+ Imprimir perímetro
+ Imprimir área

** Problema 4: Calculadora
Crear un programa que cargue 2 valores decimales. Luego, imprimir:
+ suma
+ diferencia (valor absoluto de la resta)
+ multiplicación
+ división
+ exponenciación

** Problema 5: Gatos
Crea una clase que contenga los atributos que creas necesarios para
definir a un gato; estos atributos deberán ser inicializados con el
método ~inicializar()~. También crea los métodos que creas necesarios
para /expresar/ la funcionalidad del gato. Deben ser al menos 5
atributos de clase y 3 métodos /sin incluir/ ~inicializar()~ e
~imprimir()~. Manda a llamar cada uno de los métodos en el orden
correcto.
